// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CSO
  MANAGER
}

enum ReplyStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  role         UserRole
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  rotatedAt DateTime? @map("rotated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?  @unique
  address   String?
  tags      String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  feedback Feedback[]

  @@map("customers")
  @@index([name])
  @@index([email])
}

model Feedback {
  id         String   @id @default(cuid())
  customerId String   @map("customer_id")
  message    String
  channel    String
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  replies  Reply[]

  @@map("feedback")
  @@index([customerId])
}

model Reply {
  id          String      @id @default(cuid())
  feedbackId  String      @map("feedback_id")
  content     String
  status      ReplyStatus @default(DRAFT)
  submittedBy String      @map("submitted_by")
  reviewedBy  String?     @map("reviewed_by")
  reviewedAt  DateTime?   @map("reviewed_at")
  comment     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@map("replies")
  @@index([feedbackId])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String   @map("actor_id")
  action    String
  resource  String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  actor User @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
  @@index([actorId, createdAt])
  @@index([resource, createdAt])
}
